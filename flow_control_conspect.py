
gladiator = {"name":"Gladiator", "year":2000, "actors": ["Russell Crowe", "Joaquin Phoenix"], "sequels":[]}
bladrunner ={"name": "Bladerunner","year":1982, "actors": ["Harrison Ford", "Rutger Hauer"], "sequels": ["Bladerunner 2049"]}
once_in_america = {"name": "Once upon a time in America", "year":1984 , "actors": ["Robert De Niro"," Joe Pesci"], "sequels":[]}
spiderman_2 = {"name": "Spider-Man 2", "actors": ["Tobey Maguire"], "year":2004, "sequels": ["Spider mna 3"]}
nice_guys = {"name":"The Nice Guys", "year":2016, "actors": ["Russell Crowe", "Ryan Gosling"], "sequels":[]}

# Пример списка со словарями, содержащими, в т.ч
movies = (gladiator, bladrunner, once_in_america, spiderman_2)

"""
Часто нам нужно достать один или несколько элементов из коллекци(последовательности)
И мы можем не знать индекса этого элемента, да и задавать в ручную индекс довольно неудобно.
Для этого нам нужен инстрмент ,позволяющий перебирать коллекции

Этот инструмент - цикл for 
Он идет по ПОСЛЕДОВАТЕЛЬНОСТЯМ (тупль, список, сет) и для этого похода использует то, что называется ИТЕРАТОРОМ
ИТЕРАТОР это переменная, которая идет ВНУТРИ цикла и принимает значения элементов один за другим
"""

for x in [1,2,3]:
	print(x)

for movie in movies:
	# внутри цикла ы можем то же, что и во всем остальном коде.
	# только еще и имея доступ к значениям ВНУТРИ цикла.
	# Например так: наш итератор movie принимает последодвательно значения в тупле movies
	# И каждыйновый шаг - ovies будет становится одним из словарей-фильмов.
	print(movie)
	# соотетственно мы можем обращаться к переменной как к словарю
	print(movie["name"])



# Частенько перебор используется для того, чтобы из одних коллекций вытаскивать значения и помещать в другие
# объявляем новый список
russel_crow_movies = []
for x in movies:
	# проходимся по существующему списку
	# делаем проверку на наличие имени актера в списке ,содержащемся в словаре
	# если оно верное, копируюм элемент из стаого списка и добавляем в новый
	if "Russell Crowe" in x["actors"]:
		# добавляем элемент, прошедший проверку в новый список
		russel_crow_movies.append(x)

# список был изменен и теперь доступен в обновленном виде
print("Russel Crow movies:  ",russel_crow_movies)



"""
Так же, говоря о последовательностях, важно помнить, что иногда нам требуется самим создать ее для проходки.
Например, мы идем сразу по двум спискам, и хотим обращаться к ним по одному и тому же индексу.
Для создания последовательностти можно воспользоваться командой RANG

синтаксиc такой - RANGE(ПЕРВАЯ ЦИФРА, ПОСЛЕДНЯЯ) 
например:
range(0, 10) - результат 1, 2, 3, 4, 5, 6, 7, 8, 9

Ее можно закрепить за переменной:
"""

test_range = range(2,15)

# и пройтись по ней циклом for

for x in test_range:
	print("Elements in range:   ", x)

# Кроме того, если у нас нет сложных условий, и вам нужно создать список из другой последовательности (тупль, сет, фрозенсет, список)
# Можно воспользоваться конструкцией из одной строки

test_gen = [x for x in range(2, 16)]

test_gen_2 = [movie for movie in movies if movie["year"] >= 2000]


"""
Если же вам нужно создать огромный ссписок или же вам хочется максимально экономить память - можно сдлеать так:
Нет, это не создание тупля, это создание такой коллекции, котоая не хранится вся в памяти ,а предназачена для перебора другим циклом
И каждое значчение вычисляется только в момен обращеня к нему, а затем переходит на следующее
"""
test_iter = (x for x in range(3,17))

